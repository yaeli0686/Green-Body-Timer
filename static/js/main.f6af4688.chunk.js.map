{"version":3,"sources":["components/mainTimer.jsx","components/counter.jsx","components/switchAlert.jsx","AppHook.jsx","reportWebVitals.js","index.js"],"names":["MainTimer","time","className","Counter","counter","text","max","SwitchAlert","App","defaults","useState","workingTime","setWorkingTime","restingTime","setRestingTime","exerciseCounter","setExerciseCounter","setsCounter","setSetsCounter","useEffect","interval","setInterval","tik","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAUeA,EARG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACI,sBAAKC,UAAU,SAAf,UACKD,EADL,QCKOE,EAPC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAC9B,OAAKF,GAAYC,GAASC,EAEtB,+BAAKD,EAAL,IAAYD,EAAZ,6BAA2BE,KAFO,MCK3BC,EANK,WAChB,OACI,uGCoFOC,EAnFH,WAEV,IAAMC,EACS,GADTA,EAES,GAFTA,EAGa,EAHbA,EAIS,EAJTA,EAKS,GALTA,EAMK,EARK,EAkBsBC,mBAASD,GAlB/B,mBAkBTE,EAlBS,KAkBIC,EAlBJ,OAmBsBF,mBAASD,GAnB/B,mBAmBTI,EAnBS,KAmBIC,EAnBJ,OAoB8BJ,mBAASD,GApBvC,mBAoBTM,EApBS,KAoBQC,EApBR,OAqBsBN,mBAASD,GArB/B,mBAqBTQ,EArBS,KAqBIC,EArBJ,KAyBhBC,qBAAU,WAER,IAAMC,EAAWC,aAAY,WAC3BC,MACC,KAEH,OAAO,kBAAMC,cAAcH,OAI7B,IAAIE,EAAM,WAEJX,GAAe,EACjBC,EAAeD,EAAc,GACpBE,EAAc,EACvBC,EAAeD,EAAc,GACpBI,EAAcR,GAEvBG,EAAeH,GACfK,EAAeL,GACfS,EAAeD,EAAc,IAEpBF,EAAkBN,GAC3BG,EAAeH,GACfK,EAAeL,GACfS,EAAeT,GACfO,EAAmBD,EAAkB,KAErCH,EAAeH,GACfK,EAAeL,GACfS,EAAeT,GACfO,EAAmBP,KAQvB,OACE,sBAAKP,UAAU,MAAf,UACE,4CAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAWD,KAPRU,GAAe,EAAIA,EAAcE,MAStC,sBAAKX,UAAU,OAAf,UACE,cAAC,EAAD,CAASE,QAASW,EAAiBT,IAAKG,EAAsBJ,KAAM,mCACpE,cAAC,EAAD,CAASD,QAASa,EAAaX,IAAKG,EAAkBJ,KAAM,oBAK7DM,EAAc,GAAKM,IAAgBR,GAAoB,cAAC,EAAD,QCvE/Ce,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f6af4688.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MainTimer = ({ time }) => {\r\n    return (\r\n        <div className=\"digits\">\r\n            {time}s\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainTimer;","import React from 'react';\r\n\r\nconst Counter = ({ counter, text, max }) => {\r\n    if (!counter || !text || !max) return null;\r\n    return (\r\n        <h3>{text} {counter} מתוך {max}</h3>\r\n    );\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\n\r\nconst SwitchAlert = () => {\r\n    return (\r\n        <h2>מחליפים תחנה!</h2>\r\n    );\r\n}\r\n\r\nexport default SwitchAlert;","import React, { useEffect, useState } from 'react';\nimport MainTimer from \"./components/mainTimer\";\nimport Counter from \"./components/counter\";\nimport SwitchAlert from './components/switchAlert';\n\nconst App = () => {\n\n  const defaults = {\n    workingTime: 10,\n    restingTime: 20,\n    exerciseCounter: 1,\n    setsCounter: 1,\n    maxExercise: 12,\n    maxSets: 3\n  }\n\n\n  //These are the states:\n\n  // const myState = useState(defaults.workingTime);\n  // const workingTime = myState[0];\n  // const setWorkingTime = myState[1];\n\n  const [workingTime, setWorkingTime] = useState(defaults.workingTime);\n  const [restingTime, setRestingTime] = useState(defaults.restingTime);\n  const [exerciseCounter, setExerciseCounter] = useState(defaults.exerciseCounter);\n  const [setsCounter, setSetsCounter] = useState(defaults.setsCounter);\n\n  //side effects of the component:\n\n  useEffect(() => {\n    // componentDidMount:\n    const interval = setInterval(() => {\n      tik();\n    }, 1000);\n    // componentWillUnmount (returns clean-up function):\n    return () => clearInterval(interval);\n  });\n\n\n  let tik = () => {\n\n    if (workingTime >= 0) {\n      setWorkingTime(workingTime - 1)\n    } else if (restingTime > 0) {\n      setRestingTime(restingTime - 1)\n    } else if (setsCounter < defaults.maxSets) {\n\n      setWorkingTime(defaults.workingTime);\n      setRestingTime(defaults.restingTime);\n      setSetsCounter(setsCounter + 1);\n\n    } else if (exerciseCounter < defaults.maxExercise) {\n      setWorkingTime(defaults.workingTime);\n      setRestingTime(defaults.restingTime);\n      setSetsCounter(defaults.setsCounter);\n      setExerciseCounter(exerciseCounter + 1);\n    } else {\n      setWorkingTime(defaults.workingTime);\n      setRestingTime(defaults.restingTime);\n      setSetsCounter(defaults.setsCounter);\n      setExerciseCounter(defaults.exerciseCounter);\n    }\n  }\n\n  //display the working-time or resting-time - each one at its turn:\n  let getTimerTime = () => {\n    return workingTime >= 0 ? workingTime : restingTime;\n  }\n  return (\n    <div className=\"App\">\n      <h1>Green Body</h1>\n\n      <div className=\"right\">\n        <MainTimer time={getTimerTime()}></MainTimer>\n      </div>\n      <div className=\"left\">\n        <Counter counter={exerciseCounter} max={defaults.maxExercise} text={\"תרגיל\"}></Counter>\n        <Counter counter={setsCounter} max={defaults.maxSets} text={\"סט\"}></Counter>\n      </div>\n\n      {/* shows only at resting-time of the final-set: */}\n\n      {workingTime < 0 && setsCounter === defaults.maxSets && <SwitchAlert />}\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n// import App from './AppClass.jsx';\nimport App from './AppHook.jsx';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}